<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OptRes</name>
    </assembly>
    <members>
        <member name="T:OptRes.Config">
            <summary>
            Error message configurations.
            </summary>
        </member>
        <member name="P:OptRes.Config.AddStackTraceToErr">
            <summary>
            When true stack trace will be added to the error messages of Res types in cases of exceptions.
            </summary>
        </member>
        <member name="P:OptRes.Config.GetErrorString">
            <summary>
            Method to convert (message, when, exception) into an error string.
            </summary>
        </member>
        <member name="T:OptRes.Ext">
            <summary>
            Extension methods for the Opt and Res types.
            </summary>
        </member>
        <member name="M:OptRes.Ext.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns Some of the first element of the <paramref name="collection"/> if it is non-empty; None otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Ext.FirstOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns Some of the first element of the <paramref name="collection"/> satisfying the <paramref name="filter"/> if any; None otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Ext.LastOrNone``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns Some of the last element of the <paramref name="collection"/> if it is non-empty; None otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Ext.LastOrNone``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns Some of the last element of the <paramref name="collection"/> satisfying the <paramref name="filter"/> if any; None otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Ext.FirstErrOrOk(System.Collections.Generic.IEnumerable{OptRes.Res})">
            <summary>
            Returns the first Err from the <paramref name="collection"/>; or Ok if all elements are okay.
            </summary>
        </member>
        <member name="M:OptRes.Ext.FirstErrOrOk``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}})">
            <summary>
            Returns the first Err from the <paramref name="collection"/>; or Ok if all elements are okay.
            </summary>
        </member>
        <member name="M:OptRes.Ext.FirstOkOrErr``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}})">
            <summary>
            Returns the first Ok(value) from the <paramref name="collection"/>; or Err if all elements are error.
            </summary>
        </member>
        <member name="M:OptRes.Ext.FirstSomeOrNone``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}})">
            <summary>
            Returns the first Some(value) from the <paramref name="collection"/>; or None if all elements are None.
            </summary>
        </member>
        <member name="M:OptRes.Ext.UnwrapSomes``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}})">
            <summary>
            Returns a collection of underlying values from the optionals in the <paramref name="collection"/>, skipping None elements.
            </summary>
        </member>
        <member name="M:OptRes.Ext.UnwrapOkays``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}})">
            <summary>
            Returns a collection of underlying values from the results in the <paramref name="collection"/>, skipping Err elements.
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryUnwrap``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}})">
            <summary>
            Converts <paramref name="collection"/> of results into Res of collection of the underlying values.
            Result will be Ok if all elements are Ok; the first Err otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryUnwrap``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}})">
            <summary>
            Converts <paramref name="collection"/> of results into Res of collection of the underlying values.
            Result will be Ok if all elements are Ok; the first Err otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Ext.AsSome``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the optional collection where each item of <paramref name="collection"/> is mapped into Some(item).
            </summary>
        </member>
        <member name="M:OptRes.Ext.AsOk``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the result collection where each item of <paramref name="collection"/> is mapped into Ok(item).
            </summary>
        </member>
        <member name="M:OptRes.Ext.Do(System.Collections.Generic.IEnumerable{OptRes.Res},System.Action)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.Do(System.Action)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.DoIfErr(System.Collections.Generic.IEnumerable{OptRes.Res},System.Action)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.DoIfErr(System.Action)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.DoIfErr(System.Collections.Generic.IEnumerable{OptRes.Res},System.Action{System.String})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.DoIfErr(System.Action{System.String})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Map``2(System.Collections.Generic.IEnumerable{OptRes.Res},``1)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.Map``1(``0)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Map``2(System.Collections.Generic.IEnumerable{OptRes.Res},System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.Map``1(System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap``2(System.Collections.Generic.IEnumerable{OptRes.Res},OptRes.Res{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.FlatMap``1(OptRes.Res{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap``2(System.Collections.Generic.IEnumerable{OptRes.Res},System.Func{OptRes.Res{``1}})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.FlatMap``1(OptRes.Res{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap(System.Collections.Generic.IEnumerable{OptRes.Res},OptRes.Res)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.FlatMap(OptRes.Res)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap(System.Collections.Generic.IEnumerable{OptRes.Res},System.Func{OptRes.Res})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.FlatMap(System.Func{OptRes.Res})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Try(System.Collections.Generic.IEnumerable{OptRes.Res},System.Action,System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.Try(System.Action,System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryMap``2(System.Collections.Generic.IEnumerable{OptRes.Res},System.Func{``1},System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res.TryMap``1(System.Func{``0},System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Reduce(System.Collections.Generic.IEnumerable{OptRes.Res},System.Boolean)">
            <summary>
            Reduces the collection of results into a single result; returns
            (i) Ok if all items are Ok;
            (ii) Err with the error message of the first (all) error(s) if <paramref name="stopAtFirstError"/> is true (false) if there exist at least one error.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ReduceResults(OptRes.Res[])">
            <summary>
            Reduces the collection of results into a single result; returns
            (i) Ok if all items are Ok;
            (ii) Err with the error message of the first error otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Reduce``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``0,``0,``0})">
            <summary>
            Reduces the underlying values of the <paramref name="collection"/> by transformation defined by <paramref name="funReduce"/> starting from <paramref name="initialValue"/>.
            Result is Ok of the reduced value only if all elements of the collection are Ok; Err otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OptRes.Ext.Reduce``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``1,``0,``1},``1)">
            <summary>
            Reduces the underlying values of the <paramref name="collection"/> by transformation defined by <paramref name="funReduce"/> starting from <paramref name="initialValue"/>.
            Result is Ok of the reduced value only if all elements of the collection are Ok; Err otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OptRes.Ext.Do``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Action)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Do(System.Action)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Do``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Action{``0})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Do(System.Action{`0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.DoIfErr``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Action)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.DoIfErr(System.Action)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.DoIfErr``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Action{System.String})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.DoIfErr(System.Action{System.String})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Map``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Map``1(System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Map``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``0,``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Map``1(System.Func{`0,``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{OptRes.Res{``1}})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.FlatMap``1(System.Func{OptRes.Res{``0}})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``0,OptRes.Res{``1}})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.FlatMap``1(System.Func{`0,OptRes.Res{``0}})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{OptRes.Res})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.FlatMap(System.Func{OptRes.Res})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``0,OptRes.Res})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.FlatMap(System.Func{`0,OptRes.Res})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Try``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Action,System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Try(System.Action,System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Try``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Action{``0},System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Try(System.Action{`0},System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryMap``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``1},System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.TryMap``1(System.Func{``0},System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryMap``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``0,``1},System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.TryMap``1(System.Func{`0,``0},System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},``1,``1)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(``0,``0)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},``1,System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(``0,System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``1},``1)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(System.Func{``0},``0)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``1},System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(System.Func{``0},System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``0,``1},``1)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(System.Func{`0,``0},``0)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``0,``1},System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(System.Func{`0,``0},System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.MatchDo``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Action{``0},System.Action)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.MatchDo(System.Action{`0},System.Action)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},``1,System.Func{System.String,``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(``0,System.Func{System.String,``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``1},System.Func{System.String,``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(System.Func{``0},System.Func{System.String,``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Func{``0,``1},System.Func{System.String,``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.MatchDo``1(System.Collections.Generic.IEnumerable{OptRes.Res{``0}},System.Action{``0},System.Action{System.String})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Res`1.MatchDo(System.Action{`0},System.Action{System.String})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Do``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Action)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Do(System.Action)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Do``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Action{``0})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Do(System.Action{`0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.DoIfNone``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Action)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.DoIfNone(System.Action)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Map``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Map``1(System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Map``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``0,``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Map``1(System.Func{`0,``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{OptRes.Opt{``1}})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.FlatMap``1(System.Func{OptRes.Opt{``0}})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.FlatMap``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``0,OptRes.Opt{``1}})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.FlatMap``1(System.Func{`0,OptRes.Opt{``0}})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Try``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Action,System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Try(System.Action,System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Try``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Action{``0},System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Try(System.Action{`0},System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryMap``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``1},System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.TryMap``1(System.Func{``0},System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryMap``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``0,``1},System.String)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.TryMap``1(System.Func{`0,``0},System.String)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},``1,``1)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Match``1(``0,``0)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},``1,System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Match``1(``0,System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``1},``1)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Match``1(System.Func{``0},``0)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``1},System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Match``1(System.Func{``0},System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``0,``1},``1)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Match``1(System.Func{`0,``0},``0)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.Match``2(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Func{``0,``1},System.Func{``1})">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.Match``1(System.Func{`0,``0},System.Func{``0})"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.MatchDo``1(System.Collections.Generic.IEnumerable{OptRes.Opt{``0}},System.Action{``0},System.Action)">
            <summary>
            [Uplifted method for collection] 
            <inheritdoc cref="M:OptRes.Opt`1.MatchDo(System.Action{`0},System.Action)"/>
            </summary>
        </member>
        <member name="M:OptRes.Ext.GetOpt``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Gets Some of the value of the key-value pair in the <paramref name="dictionary"/> with the given <paramref name="key"/>; None if it doesn't exist.
            </summary>
        </member>
        <member name="M:OptRes.Ext.None``1">
            <summary>
            Creates an option of <typeparamref name="T"/> as None variant.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Some``1(``0)">
            <summary>
            Creates an option of <typeparamref name="T"/> as Some variant with the given <paramref name="value"/>.
            However, if the <paramref name="value"/> is null, it will map into None.
            </summary>
        </member>
        <member name="M:OptRes.Ext.SomeIf``1(System.Boolean,``0)">
            <summary>
            Creates a result of <typeparamref name="T"/> as Some variant with value <paramref name="value"/> if the <paramref name="someCondition"/> holds.
            Otherwise, it will return the None variant.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Flatten``1(OptRes.Opt{OptRes.Opt{``0}})">
            <summary>
            Flattens the option of option of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryParseOrNone``1(System.String,System.Func{System.String,``0})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> using the <paramref name="parser"/> if succeeds; None if fails.
            Parser is called within a try-catch block, where exceptions are mapped to None.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseIntOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseIntOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDoubleOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDoubleOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseFloatOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseFloatOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseShortOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseShortOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseLongOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseLongOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseHalfOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseHalfOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseBoolOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseBoolOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDateTimeOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDateTimeOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDateOnlyOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDateOnlyOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseTimeOnlyOrNone(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseTimeOnlyOrNone(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Ok">
            <summary>
            Creates a result as the Ok variant.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Err(System.String)">
            <summary>
            Creates a result as the Err variant; with the given error information: <paramref name="errorMessage"/>.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Err(System.String,System.String)">
            <summary>
            Creates a result as the Err variant; with the given error information: <paramref name="errorMessage"/>, <paramref name="when"/>.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Err(System.String,System.Exception)">
            <summary>
            Creates a result as the Err variant; with the given error information: <paramref name="when"/>, <paramref name="exception"/>.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Err(System.String,System.String,System.Exception)">
            <summary>
            Creates a result as the Err variant; with the given error information: <paramref name="errorMessage"/>, <paramref name="when"/>, <paramref name="exception"/>.
            </summary>
        </member>
        <member name="M:OptRes.Ext.OkIf(System.Boolean,System.String)">
            <summary>
            Creates a result as Ok variant if the <paramref name="okCondition"/> holds.
            Otherwise, it will map into an Err.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ErrIf(System.Boolean,System.String)">
            <summary>
            Creates a result as Err variant if the <paramref name="errorCondition"/> holds.
            Otherwise, it will return Ok.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Ok``1(``0)">
            <summary>
            Creates a result of <typeparamref name="T"/> as Ok variant with value <paramref name="value"/>.
            However, if the <paramref name="value"/> is null, it will map into Err.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Err``1(System.String)">
            <summary>
            Creates a result of <typeparamref name="T"/> as Err with the given <paramref name="errorMessage"/>.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Err``1(System.String,System.String)">
            <summary>
            Creates a result of <typeparamref name="T"/> as Err with the given <paramref name="errorMessage"/> which is observed during <paramref name="when"/>.
            </summary>
        </member>
        <member name="M:OptRes.Ext.OkIf``1(System.Boolean,``0,System.String)">
            <summary>
            Creates a result of <typeparamref name="T"/> as Ok variant with value <paramref name="value"/> if the <paramref name="okCondition"/> holds.
            Otherwise, it will map into an Err.
            </summary>
        </member>
        <member name="M:OptRes.Ext.OkIf``1(System.Boolean,System.Func{``0},System.String)">
            <summary>
            Creates a result of <typeparamref name="T"/> as Ok variant with value <paramref name="lazyGetValue"/>() if the <paramref name="okCondition"/> holds.
            Otherwise, it will map into an Err.
            Note that the <paramref name="lazyGetValue"/> is only evaluated if the <paramref name="okCondition"/> holds.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Flatten(OptRes.Res{OptRes.Res})">
            <summary>
            Flattens the result of result.
            </summary>
        </member>
        <member name="M:OptRes.Ext.Flatten``1(OptRes.Res{OptRes.Res{``0}})">
            <summary>
            Flattens the result of result of <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``2(OptRes.Res{``0},``1)">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="nextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``2(OptRes.Res{``0},System.Func{``1})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``2(OptRes.Res{``0},System.Func{OptRes.Res{``1}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``2(OptRes.Res{``0},System.Func{``0,``1})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``2(OptRes.Res{``0},System.Func{``0,OptRes.Res{``1}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``3(OptRes.Res{System.ValueTuple{``0,``1}},``2)">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="nextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``3(OptRes.Res{System.ValueTuple{``0,``1}},System.Func{``2})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``3(OptRes.Res{System.ValueTuple{``0,``1}},System.Func{OptRes.Res{``2}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``3(OptRes.Res{System.ValueTuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``3(OptRes.Res{System.ValueTuple{``0,``1}},System.Func{``0,``1,OptRes.Res{``2}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``4(OptRes.Res{System.ValueTuple{``0,``1,``2}},``3)">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="nextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``4(OptRes.Res{System.ValueTuple{``0,``1,``2}},System.Func{``3})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``4(OptRes.Res{System.ValueTuple{``0,``1,``2}},System.Func{OptRes.Res{``3}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``4(OptRes.Res{System.ValueTuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``4(OptRes.Res{System.ValueTuple{``0,``1,``2}},System.Func{``0,``1,``2,OptRes.Res{``3}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``5(OptRes.Res{System.ValueTuple{``0,``1,``2,``3}},``4)">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="nextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``5(OptRes.Res{System.ValueTuple{``0,``1,``2,``3}},System.Func{``4})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``5(OptRes.Res{System.ValueTuple{``0,``1,``2,``3}},System.Func{OptRes.Res{``4}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``5(OptRes.Res{System.ValueTuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``5(OptRes.Res{System.ValueTuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,OptRes.Res{``4}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``6(OptRes.Res{System.ValueTuple{``0,``1,``2,``3,``4}},``5)">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="nextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``6(OptRes.Res{System.ValueTuple{``0,``1,``2,``3,``4}},System.Func{``5})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``6(OptRes.Res{System.ValueTuple{``0,``1,``2,``3,``4}},System.Func{OptRes.Res{``5}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``6(OptRes.Res{System.ValueTuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,``5})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.MapAppend``6(OptRes.Res{System.ValueTuple{``0,``1,``2,``3,``4}},System.Func{``0,``1,``2,``3,``4,OptRes.Res{``5}})">
            <summary>
            Just returns back the Err when IsErr.
            Extends the value with <paramref name="getNextResult"/> when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Ext.TryParseOrErr``1(System.String,System.Func{System.String,``0})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> using the <paramref name="parser"/> if succeeds; None if fails.
            Parser is called within a try-catch block, where exceptions are mapped to None.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseIntOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseIntOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDoubleOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDoubleOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseFloatOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseFloatOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseShortOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseShortOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseLongOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseLongOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseHalfOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseHalfOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseBoolOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseBoolOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDateTimeOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDateTimeOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDateOnlyOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseDateOnlyOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseTimeOnlyOrErr(System.String)">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="M:OptRes.Ext.ParseTimeOnlyOrErr(System.ReadOnlySpan{System.Char})">
            <summary>
            Returns Some of parsed value from <paramref name="text"/> if succeeds; None if fails.
            </summary>
        </member>
        <member name="T:OptRes.Opt`1">
            <summary>
            Optiona type which can be either of the two variants: Some(value-of-<typeparamref name="T"/>) or None.
            </summary>
        </member>
        <member name="F:OptRes.Opt`1.IsSome">
            <summary>
            Returns whether the option has Some value or not.
            </summary>
        </member>
        <member name="P:OptRes.Opt`1.IsNone">
            <summary>
            Returns whether the option is None or not.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.#ctor">
            <summary>
            Option type of <typeparamref name="T"/>: either None or Some value.
            Parameterless ctor returns None; better use 'Some' or `None` to construct options by adding `using static OptRes.Ext`.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.op_Implicit(`0)~OptRes.Opt{`0}">
            <summary>
            Implicitly converts to <paramref name="value"/> into <see cref="T:OptRes.Opt`1"/>.Some(<paramref name="value"/>).
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.ThrowIfNone">
            <summary>
            Returns the option back when <see cref="F:OptRes.Opt`1.IsSome"/>; throws when <see cref="P:OptRes.Opt`1.IsNone"/>.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.ThrowIfNone(System.String)">
            <summary>
            Returns the option back when <see cref="F:OptRes.Opt`1.IsSome"/>; throws with the given <paramref name="errorMessage"/> when <see cref="P:OptRes.Opt`1.IsNone"/>.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Unwrap">
            <summary>
            Returns the underlying value when <see cref="F:OptRes.Opt`1.IsSome"/>; or throws when <see cref="P:OptRes.Opt`1.IsNone"/>.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Unwrap(System.String)">
            <summary>
            Returns the underlying value when <see cref="F:OptRes.Opt`1.IsSome"/>; throws with the given <paramref name="errorMessageIfNone"/> when <see cref="P:OptRes.Opt`1.IsNone"/>.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.UnwrapOr(`0)">
            <summary>
            Returns the underlying value when <see cref="F:OptRes.Opt`1.IsSome"/>; or returns the <paramref name="fallbackValue"/> when <see cref="P:OptRes.Opt`1.IsNone"/>.
            </summary>
            <param name="fallbackValue"></param>
        </member>
        <member name="M:OptRes.Opt`1.UnwrapOr(System.Func{`0})">
            <summary>
            Returns the underlying value when <see cref="F:OptRes.Opt`1.IsSome"/>; or returns <paramref name="lazyFallbackValue"/>() when <see cref="P:OptRes.Opt`1.IsNone"/>.
            </summary>
            <param name="lazyFallbackValue"></param>
        </member>
        <member name="M:OptRes.Opt`1.Match``1(``0,``0)">
            <summary>
            Maps into <paramref name="whenSome"/> whenever IsSome; and into <paramref name="whenNone"/> otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Match``1(``0,System.Func{``0})">
            <summary>
            Maps into <paramref name="whenSome"/> whenever IsSome; and into <paramref name="whenNone"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Match``1(System.Func{``0},``0)">
            <summary>
            Maps into <paramref name="whenSome"/>() whenever IsSome; and into <paramref name="whenNone"/> otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Match``1(System.Func{``0},System.Func{``0})">
            <summary>
            Maps into <paramref name="whenSome"/>() whenever IsSome; and into <paramref name="whenNone"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Match``1(System.Func{`0,``0},``0)">
            <summary>
            Maps into <paramref name="whenSome"/>(Unwrap()) whenever IsSome; and into <paramref name="whenNone"/> otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Match``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Maps into <paramref name="whenSome"/>(Unwrap()) whenever IsSome; and into <paramref name="whenNone"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.MatchDo(System.Action{`0},System.Action)">
            <summary>
            Executes <paramref name="whenSome"/>(Unwrap()) if IsSome; <paramref name="whenNone"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.ToRes">
            <summary>
            Converts Some(val) to Ok(val); and None to Err.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.ToRes(System.String)">
            <summary>
            Converts Some(val) to Ok(val); and None to Err with the error message including the <paramref name="requiredValueName"/>.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Do(System.Action)">
            <summary>
            Runs <paramref name="action"/>() only if IsSome; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Do(System.Action{`0})">
            <summary>
            Runs <paramref name="action"/>() only if IsSome; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.DoIfNone(System.Action)">
            <summary>
            Runs <paramref name="actionOnNone"/>() only if IsNone; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Map``1(System.Func{``0})">
            <summary>
            Returns None when IsNone; Some(<paramref name="map"/>()) when IsSome.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Map``1(System.Func{`0,``0})">
            <summary>
            Returns None when IsNone; Some(<paramref name="map"/>(Unwrap())) when IsSome.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.FlatMap``1(System.Func{OptRes.Opt{``0}})">
            <summary>
            Returns None when IsNone; <paramref name="map"/>() when IsSome flattening the result.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.FlatMap``1(System.Func{`0,OptRes.Opt{``0}})">
            <summary>
            Returns None when IsNone; <paramref name="map"/>(val) when IsSome flattening the result.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Try(System.Action,System.String)">
            <summary>
            When IsSome executes <paramref name="action"/>() in a try-catch block: returns back itself if the process succeeds; Err if it throws.
            Does not do anything and returns back itself when IsNone.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Try(System.Action{`0},System.String)">
            <summary>
            When IsSome executes <paramref name="action"/>(val) in a try-catch block: returns back itself if the process succeeds; Err if it throws.
            Does not do anything and returns back itself when IsNone.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.TryMap``1(System.Func{``0},System.String)">
            <summary>
            When IsOk tries to map to Ok(<paramref name="map"/>()) in a try-catch block: returns Err if it throws.
            Does not do anything and returns back itself when IsErr.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.TryMap``1(System.Func{`0,``0},System.String)">
            <summary>
            When IsOk tries to map to Ok(<paramref name="map"/>(value)) in a try-catch block: returns Err if it throws.
            Does not do anything and returns back itself when IsErr.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.ToString">
            <summary>
            Returns the text representation of the option.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Equals(System.Object)">
            <summary>
            Returns whether this option is equal to the <paramref name="obj"/>.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.Equals(OptRes.Opt{`0})">
            <summary>
            Returns true if both values are <see cref="F:OptRes.Opt`1.IsSome"/> and their unwrapped values are equal; false otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.GetHashCode">
            <summary>
            Serves as the default hash function.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.op_Equality(OptRes.Opt{`0},OptRes.Opt{`0})">
            <summary>
            Returns true if both values are <see cref="F:OptRes.Opt`1.IsSome"/> and their unwrapped values are equal; false otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Opt`1.op_Inequality(OptRes.Opt{`0},OptRes.Opt{`0})">
            <summary>
            Returns true if either value is <see cref="P:OptRes.Opt`1.IsNone"/> or their unwrapped values are not equal; false otherwise.
            </summary>
        </member>
        <member name="T:OptRes.Res">
            <summary>
            Result type which can be either of the two variants: Ok or Err(error-message).
            </summary>
        </member>
        <member name="P:OptRes.Res.IsOk">
            <summary>
            True if the result is Ok; false otherwise.
            </summary>
        </member>
        <member name="P:OptRes.Res.IsErr">
            <summary>
            True if the result is Err; false otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.#ctor">
            <summary>
            Result type which can either be Ok or Err.
            Parameterless ctor returns Ok; better use 'Ok' or `Err` to construct results by adding `using static OptRes.Ext`.
            </summary>
        </member>
        <member name="M:OptRes.Res.ThrowIfErr">
            <summary>
            Returns the result back when <see cref="P:OptRes.Res.IsOk"/>; throws when <see cref="P:OptRes.Res.IsErr"/>.
            </summary>
        </member>
        <member name="M:OptRes.Res.OkIf(System.Boolean,System.String)">
            <summary>
            Maps into either Ok (Err) if the <paramref name="condition"/> holds (fails) when IsOk; returns itself back otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Match``1(``0,``0)">
            <summary>
            Maps into <paramref name="whenOk"/> whenever IsOk; and into <paramref name="whenErr"/> otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Match``1(``0,System.Func{``0})">
            <summary>
            Maps into <paramref name="whenOk"/> whenever IsOk; and into <paramref name="whenErr"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Match``1(System.Func{``0},``0)">
            <summary>
            Maps into <paramref name="whenOk"/>() whenever IsOk; and into <paramref name="whenErr"/> otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Match``1(System.Func{``0},System.Func{``0})">
            <summary>
            Maps into <paramref name="whenOk"/>() whenever IsOk; and into <paramref name="whenErr"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Match``1(System.Action,System.Action)">
            <summary>
            Executes <paramref name="whenOk"/>() whenever IsOk; and <paramref name="whenErr"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Match``1(``0,System.Func{System.String,``0})">
            <summary>
            Maps into <paramref name="whenOk"/> whenever IsOk; and into <paramref name="whenErr"/>(errorMessage) otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Match``1(System.Func{``0},System.Func{System.String,``0})">
            <summary>
            Maps into <paramref name="whenOk"/>() whenever IsOk; and into <paramref name="whenErr"/>(errorMessage) otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Match``1(System.Action,System.Action{System.String})">
            <summary>
            Executes <paramref name="whenOk"/>() whenever IsOk; and <paramref name="whenErr"/>(errorMessage) otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res.Do(System.Action)">
            <summary>
            Runs <paramref name="action"/>() only if IsOk; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Res.DoIfErr(System.Action)">
            <summary>
            Runs <paramref name="action"/>() only if IsErr; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Res.DoIfErr(System.Action{System.String})">
            <summary>
            Runs <paramref name="action"/>(ErrorMessage) only if IsErr; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Res.Map``1(``0)">
            <summary>
            Returns the error when IsErr; Ok(<paramref name="map"/>) when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Res.Map``1(System.Func{``0})">
            <summary>
            Returns the error when IsErr; Ok(<paramref name="map"/>()) when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Res.FlatMap(OptRes.Res)">
            <summary>
            Returns the error when IsErr; <paramref name="map"/> when IsOk, flattenning the result.
            </summary>
        </member>
        <member name="M:OptRes.Res.FlatMap(System.Func{OptRes.Res})">
            <summary>
            Returns the error when IsErr; <paramref name="map"/>() when IsOk, flattenning the result.
            </summary>
        </member>
        <member name="M:OptRes.Res.FlatMap``1(OptRes.Res{``0})">
            <summary>
            Returns the error when IsErr; <paramref name="map"/> when IsOk, flattenning the result.
            </summary>
        </member>
        <member name="M:OptRes.Res.FlatMap``1(System.Func{OptRes.Res{``0}})">
            <summary>
            Returns the error when IsErr; <paramref name="map"/>() when IsOk, flattenning the result.
            </summary>
        </member>
        <member name="M:OptRes.Res.Try(System.Action,System.String)">
            <summary>
            When IsOk executes <paramref name="action"/>() in a try-catch block: returns back itself if the process succeeds; Err if it throws.
            Does not do anything and returns back itself when IsErr.
            </summary>
        </member>
        <member name="M:OptRes.Res.TryMap``1(System.Func{``0},System.String)">
            <summary>
            Returns the error when IsErr.
            Otherwise, tries to map into Ok(<paramref name="map"/>()) in a try-catch block and returns the Err if it throws.
            </summary>
        </member>
        <member name="M:OptRes.Res.ToString">
            <summary>
            String representation.
            </summary>
        </member>
        <member name="T:OptRes.Res`1">
            <summary>
            Result type which can be either of the two variants: Ok(value-of-<typeparamref name="T"/>) or Err(error-message).
            </summary>
        </member>
        <member name="P:OptRes.Res`1.IsOk">
            <summary>
            True if the result is Ok; false otherwise.
            </summary>
        </member>
        <member name="P:OptRes.Res`1.IsErr">
            <summary>
            True if the result is Err; false otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.#ctor">
            <summary>
            <inheritdoc cref="T:OptRes.Res`1"/>
            </summary>
        </member>
        <member name="M:OptRes.Res`1.op_Implicit(`0)~OptRes.Res{`0}">
            <summary>
            Implicitly converts to <paramref name="value"/> into <see cref="T:OptRes.Opt`1"/>.Some(<paramref name="value"/>).
            </summary>
        </member>
        <member name="M:OptRes.Res`1.WithoutVal">
            <summary>
            Converts into <see cref="T:OptRes.Res"/> dropping the value if it <see cref="P:OptRes.Res`1.IsOk"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OptRes.Res`1.ThrowIfErr">
            <summary>
            Returns the result back when <see cref="P:OptRes.Res`1.IsOk"/>; throws when <see cref="P:OptRes.Res`1.IsErr"/>.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.IntoOpt">
            <summary>
            Converts into Some(val) if the result is Ok(val); None if the result is Err.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.OkIf(System.Boolean,System.String)">
            <summary>
            Maps into either this (Err) if the <paramref name="condition"/> holds (fails) when IsOk; returns itself back otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.OkIf(System.Func{`0,System.Boolean},System.String)">
            <summary>
            Maps into either this (Err) if the <paramref name="condition"/>(Unwrap()) holds (fails) when IsOk; returns itself back otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Unwrap">
            <summary>
            Returns the underlying value when <see cref="P:OptRes.Res`1.IsOk"/>; or throws when <see cref="P:OptRes.Res`1.IsErr"/>.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.UnwrapOr(`0)">
            <summary>
            Returns the underlying value when <see cref="P:OptRes.Res`1.IsOk"/>; or returns the <paramref name="fallbackValue"/> when <see cref="P:OptRes.Res`1.IsErr"/>.
            </summary>
            <param name="fallbackValue"></param>
        </member>
        <member name="M:OptRes.Res`1.UnwrapOr(System.Func{`0})">
            <summary>
            Returns the underlying value when <see cref="P:OptRes.Res`1.IsOk"/>; or returns <paramref name="lazyFallbackValue"/>() when <see cref="P:OptRes.Res`1.IsErr"/>.
            </summary>
            <param name="lazyFallbackValue"></param>
        </member>
        <member name="M:OptRes.Res`1.UnwrapOrThrow">
            <summary>
            Returns the underlying value when <see cref="P:OptRes.Res`1.IsOk"/>; throws when <see cref="P:OptRes.Res`1.IsErr"/>.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(``0,``0)">
            <summary>
            Maps into <paramref name="whenOk"/> whenever IsOk; and into <paramref name="whenErr"/> otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(``0,System.Func{``0})">
            <summary>
            Maps into <paramref name="whenOk"/> whenever IsOk; and into <paramref name="whenErr"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(System.Func{``0},``0)">
            <summary>
            Maps into <paramref name="whenOk"/>() whenever IsOk; and into <paramref name="whenErr"/> otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(System.Func{``0},System.Func{``0})">
            <summary>
            Maps into <paramref name="whenOk"/>() whenever IsOk; and into <paramref name="whenErr"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(System.Func{`0,``0},``0)">
            <summary>
            Maps into <paramref name="whenOk"/>(Unwrap()) whenever IsOk; and into <paramref name="whenErr"/> otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(System.Func{`0,``0},System.Func{``0})">
            <summary>
            Maps into <paramref name="whenOk"/>(Unwrap()) whenever IsOk; and into <paramref name="whenErr"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.MatchDo(System.Action{`0},System.Action)">
            <summary>
            Executes <paramref name="whenOk"/>(Unwrap()) if IsOk; <paramref name="whenErr"/>() otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(``0,System.Func{System.String,``0})">
            <summary>
            Maps into <paramref name="whenOk"/> whenever IsOk; and into <paramref name="whenErr"/>(errMsg) otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(System.Func{``0},System.Func{System.String,``0})">
            <summary>
            Maps into <paramref name="whenOk"/>() whenever IsOk; and into <paramref name="whenErr"/>(errMsg) otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Match``1(System.Func{`0,``0},System.Func{System.String,``0})">
            <summary>
            Maps into <paramref name="whenOk"/>(Unwrap()) whenever IsOk; and into <paramref name="whenErr"/>(errMsg) otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.MatchDo(System.Action{`0},System.Action{System.String})">
            <summary>
            Executes <paramref name="whenOk"/>(Unwrap()) if IsOk; <paramref name="whenErr"/>(errMsg) otherwise.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Do(System.Action)">
            <summary>
            Runs <paramref name="action"/>() only if IsOk; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Do(System.Action{`0})">
            <summary>
            Runs <paramref name="action"/>(Unwrap()) only if IsOk; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.DoIfErr(System.Action)">
            <summary>
            Runs <paramref name="actionOnErr"/>() only if IsErr; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.DoIfErr(System.Action{System.String})">
            <summary>
            Runs <paramref name="actionOnErr"/>(ErrorMessage) only if IsErr; and returns itself back.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Map``1(System.Func{``0})">
            <summary>
            Returns the error when IsErr; Ok(<paramref name="map"/>()) when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Map``1(System.Func{`0,``0})">
            <summary>
            Returns the error when IsErr; Ok(<paramref name="map"/>(Unwrap())) when IsOk.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.FlatMap(System.Func{OptRes.Res})">
            <summary>
            Returns the error when IsErr; <paramref name="map"/>() when IsOk flattenning the result.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.FlatMap(System.Func{`0,OptRes.Res})">
            <summary>
            Returns the error when IsErr; <paramref name="map"/>(Unwrap()) when IsOk flattenning the result.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.FlatMap``1(System.Func{OptRes.Res{``0}})">
            <summary>
            Returns the error when IsErr; <paramref name="map"/>() when IsOk flattenning the result.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.FlatMap``1(System.Func{`0,OptRes.Res{``0}})">
            <summary>
            Returns the error when IsErr; <paramref name="map"/>(Unwrap()) when IsOk flattenning the result.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Try(System.Action,System.String)">
            <summary>
            When IsOk executes <paramref name="action"/>() in a try-catch block: returns back itself if the process succeeds; Err if it throws.
            Does not do anything and returns back itself when IsErr.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.Try(System.Action{`0},System.String)">
            <summary>
            When IsOk executes <paramref name="action"/>(val) in a try-catch block: returns back itself if the process succeeds; Err if it throws.
            Does not do anything and returns back itself when IsErr.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.TryMap``1(System.Func{``0},System.String)">
            <summary>
            Returns the error when IsErr.
            Otherwise, tries to map into Ok(<paramref name="map"/>()) in a try-catch block and returns the Err if it throws.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.TryMap``1(System.Func{`0,``0},System.String)">
            <summary>
            Returns the error when IsErr.
            Otherwise, tries to map into Ok(<paramref name="map"/>(val)) in a try-catch block and returns the Err if it throws.
            </summary>
        </member>
        <member name="M:OptRes.Res`1.ToString">
            <summary>
            String representation.
            </summary>
        </member>
    </members>
</doc>
